var windowHeight=window.innerHeight,windowWidth=window.innerWidth,terminalWindow=document.querySelector(".window");terminalWindow.style.top=windowHeight/2-terminalWindow.offsetHeight/2+"px",terminalWindow.style.left=windowWidth/2-terminalWindow.offsetWidth/2+"px",document.addEventListener("DOMContentLoaded",function(){var e=(new Date).toString();e=e.substr(0,e.indexOf("GMT")-1),$(".date").append("Last login: "+e+" on ttys000\n"),$(".close").on("click",function(){alert("Please no, dont do that :(")}),$(".minimize").on("click",function(){alert("Im sorry, you can't minimize this awesomeness ;)")}),$(".maximize").on("click",function(){"100%"!=terminalWindow.style.width?(console.log("its not 100%"),$(terminalWindow).css({left:"50%",top:"50%",transform:"translateY(-50%) translateX(-50%)",height:"100%",width:"100%"}),terminalWindow.setAttribute("data-x","0"),terminalWindow.setAttribute("data-y","0")):(console.log("its 100%"),$(".window").css({height:"80%",width:"80%",left:"0px",top:"0px",transform:"none"}))});var t=function(){"use strict";function e(e){var t=document.createElement("li");return t.innerHTML=e,t}function t(){var e=!1,t=c.split(" "),n=t[0];t.shift();for(var a=0;a<h.length;a++)if(n===h[a].name){h[a].function(t),e=!0;break}e||r.append("user: command not found: "+c+"\n"),d.push(c),p=d.length,c=""}function n(){r.append('<span class="prompt">'+s+"</span> "),r.append('<span class="path">'+l+"</span> ")}function a(e){c=c.slice(0,-e),r.html(r.html().slice(0,-e))}function i(){c.length>0&&a(c.length)}function o(e){r.append(e),c+=e}var r=$(".terminal"),s="jakes-portfolio:",l="~",d=[],p=0,c="",h=[{name:"help",function:function(){var t=document.createElement("ul");t.class="help-list",t.appendChild(e("clear")),t.appendChild(e("about-me")),t.appendChild(e("my-work")),t.appendChild(e("contact")),t.appendChild(e("credit")),r.append(t)}},{name:"clear",function:function(){r.text("")}},{name:"about-me",function:function(){r.append('My name is Jake Schroeder; I am 18 and I am currently studying Design and Technology at <a target="_blank" href="https://www.newschool.edu/parsons/">Parsons school of design</a>. I live in Manhattan NY and I plan on staying here a while. I enjoy every aspect of digital product creation. From design to development to production, I love the process. When people ask me what I do, I tell them that I deal in ideas but more specifically ideas that push the boundaries of innovation. Most of these ideas, I discard but the ones that involve utilizing technology, I pursue. I hope to have a future in front-end software development and one day build something of my own. Thank you for visiting :)\n')}},{name:"my-work",function:function(){var t=document.createElement("ul");t.class="work-list",t.appendChild(e('<a href="http://incline.azurewebsites.net/" target="_blank">Incline Fitness</a>')),t.appendChild(e('<a href="https://drive.google.com/file/d/0BxfG2U55qf7XMXBfRFpiQlRweUk/view?usp=sharing" target="_blank">Incline Fitness Branding Guide</a>')),t.appendChild(e('<a href="http://heliosinsights.com/" target="_blank">Helios IPM</a>')),t.appendChild(e('<a href="https://www.ipdocketingrules.com/index.php?title=Main_Page" target="_blank">IP Docketing Rules</a>')),r.append(t)}},{name:"contact-me",function:function(){}},{name:"credit",function:function(){var t=document.createElement("ul");t.class="credit-list",t.appendChild(e('<a href="https://codepen.io/marcbizal/pen/VLKoam?q=terminal&limit=all&type=type-pens" target="_blank">Terminal Functionality by: Marcus Bizal</a>')),t.appendChild(e('<a href="http://interactjs.io/" target="_blank">Window Drag & Resize Behavior from: Interact.js</a>')),t.appendChild(e('<a href="http://www.mattboldt.com/demos/typed-js/" target="_blank">Typing effect from: Typed.js</a>')),r.append(t)}}];$(document).keydown(function(e){var t="number"==typeof(e=e||window.event).which?e.which:e.keyCode;if(8===t&&"INPUT"!==e.target.tagName&&"TEXTAREA"!==e.target.tagName&&(e.preventDefault(),""!==c&&a(1)),38===t||40===t){38===t?--p<0&&p++:40===t&&++p>d.length-1&&p--;var n=d[p];void 0!==n&&(i(),o(n))}}),$(document).keypress(function(e){var a="number"==typeof(e=e||window.event).which?e.which:e.keyCode;switch(a){case 13:r.append("\n"),t(),n();break;default:o(String.fromCharCode(a))}}),n()};interact(".window").draggable({onmove:function(e){var t=e.target,n=(parseFloat(t.getAttribute("data-x"))||0)+e.dx,a=(parseFloat(t.getAttribute("data-y"))||0)+e.dy;t.style.webkitTransform=t.style.transform="translate("+n+"px, "+a+"px)",t.setAttribute("data-x",n),t.setAttribute("data-y",a)},allowFrom:".heading"}).resizable({edges:{right:!0,bottom:!0,left:!0,top:!0},margin:10}).on("resizemove",function(e){var t=e.target,n=parseFloat(t.getAttribute("data-x"))||0,a=parseFloat(t.getAttribute("data-y"))||0;t.style.width=e.rect.width+"px",t.style.height=e.rect.height+"px",document.querySelector(".title").textContent="1. jake-schroeder-portfolio: ~ (user) "+Math.round(e.rect.width)+"Ã—"+Math.round(e.rect.height),n+=e.deltaRect.left,a+=e.deltaRect.top,t.style.webkitTransform=t.style.transform="translate("+n+"px,"+a+"px)",t.setAttribute("data-x",n),t.setAttribute("data-y",a)});setTimeout(function(){new Typed(".element0-text",{strings:[" Hi there, my name is Jake"],typeSpeed:30,backSpeed:0,loop:!1,showCursor:!1,onComplete:function(){}})},0),setTimeout(function(){$(".element1").css("display","inherit");new Typed(".element1-text",{strings:[" This is my portfolio website, I hope you enjoy :)"],typeSpeed:30,backSpeed:0,loop:!1,showCursor:!1,onComplete:function(){}})},3e3),setTimeout(function(){$(".element2").css("display","inherit");new Typed(".element2-text",{strings:[' Please type "Help" to see a list of commands^3000'],typeSpeed:30,backSpeed:0,loop:!1,showCursor:!1,onComplete:function(){t(),$(".terminal").addClass("terminal-after")}})},7e3)});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
